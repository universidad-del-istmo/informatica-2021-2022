-- Problema 1: 
-- A continuacion se le presenta la funcion
-- "pushBack" definida utilizando fold.
-- Su tarea es hacer la reduccion de:
-- "pushBack 3 (Cons 1 (Cons 2 Nil))"

pushAgregador estado x = Cons x estado

pushBack x xs =
    fold pushAgregador (Cons x Nil) xs




-- Problema 2:
-- Utilizar la funcion "fold" para definir
-- la funcion "take". La funcion "take" debe
-- tomar una lista y un numero "n" y extraer
-- de la lista los primeros "n" elementos
-- que aparecen en la lista.
-- Puede basarse en la funcion "drop" para
-- su implementacion.

reverse Nil = Nil 
 reverse (Cons x xs) == pushBack x (reverse xs)

 takeAgregador (resultado, n) x ==
     if n > 0 
         then a
         else y
    where 
        a = ((pushBack x resultado, n -1))
        y = (resultado, n - 1)

take' n xs = fold (takeAgregador) (Nil, n) xs 
take' n xs = (fst (takeAux n (reverse xs)))




-- Problema 3:
-- Utilizar la funcion "fold" para definir
-- la funcion "elem". La funcion "elem" toma
-- un numero "i" como parametro y una lista.
-- Esta funcion debe retornar el elemento
-- ubicado en la posicion "i" de la lista.
-- Por ejemplo:
-- elem 2 (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil)))) == 3
-- elem 0 (Cons 1 (Cons 2 (Cons 3 Nil))) == 1
-- elem 1 (Cons 1 (Cons 2 (Cons 3 Nil))) == 2


elemAgg (Cons x Nil) = x 

 elemAgregador (resultado, n) x ==
     if n == 0 
         then a 
         else b 

     where 
         a = (Cons x Nil, n - 1)
         b = (resultado, n - 1) 

elemAux n xs = fold (elemAgregador) (Nil, n) xs

elem n xs = elemAgg (fst (elemAux n (reverse xs)))





-- Problema 4:
-- Utilizar la funcion "fold" para definir
-- la funcion "update". Esta funcion debe
-- tomar un numero "i", un valor "v" y una
-- lista. Debe retornar una lista donde
-- el elemento en la posicion "i" es
-- reemplazado por "v". POr ejemplo:
-- update 0 42 (Cons 1 (Cons 2 (Cons 3 Nil))) == (Cons 42 (Cons 2 (Cons 3 Nil)))
-- update 2 42 (Cons 1 (Cons 2 (Cons 3 Nil))) == (Cons 1 (Cons 2 (Cons 42 Nil)))

update :: Eq t => t -> t -> [t] -> [t]
update _ _ [] = [] 
update' i v  xs = map (h ->)

if h = id 
then v 
else h) xs






-- Problema 5:
-- Utilizar la funcion "fold" para definir
-- la funcion "map". En otras palabras,
-- provea una definicion alterna de la
-- funcion "map" que este definida en
-- terminos de la funcion fold.


map _ Nil = Nil 
map f (Cons x xs) = Cons (f x) (map f xs) 

map' f estado x xs = (Cons f x, estado f xs)

fold' map' estado x xs = map' (fold map' estado xs) x

 --map _ Nil = Nil 
 --map f (Cons x xs) = Cons (f x) (map f xs) 

 --fold agg cero Nil = cero
 --fold agg cero (Cons x xs) =
Grupo: 
Diego Jose Giron Figueroa
Jorge Armando Ferguson Yeaggy

-- PREGUNTA 1 -- 
Definición de suma

a + 0 = a

a + 0 = 0 + a

a + succ (b) = succ (a + b)


demostrar succ 0+ n = succ n

succ (0) +n = succ (n)

succ (0) + n = succ (0 + n)

n + 1 = succ (n)

succ n = succ n

-- PREGUNTA 2 --

0 > 0 = 0
N > 0 = 1
0 > M = 0
SUCC A > SUCC B = A > B

-- PREGUNTA 3 --

Definición de suma

a + 0 = a

a + 0 = 0 + a

a + succ (b) = succ (a + b)


esPar


succ (n + 1) = succ ( succ (n))

esPar n = n + succ (n + 1)

n = 0

esPar n = n + succ (n +1)


esPar n = 0 + succ(0 + 1)

esPar n = 0 + succ (1)

esPar n = 2

esImpar


n = 1

succ (n + 1) = succ ( succ (n))

esImpar n = n + succ (n)

esImpar n = succ (n + 1)


esImpar n = succ (1+1)

esImpar n = succ (2)

esImpar n= 3

--PREGUNTA 4 --

{-# LANGUAGE NoImplicitPrelude #-}



module Main where



import Prelude (Show, undefined, putStrLn)



data Natural = O | Succ Natural deriving Show



uno = succ (O)

dos = succ ( uno)

tres = succ (dos)

cuatro = succ ( tres)

cinco = succ (cuatro)



predecesor O = O

predecesor succ ( O ) = O

predecesor succ (succ ( O ) ) = succ ( O )



predecesor succ ( a ) = a

predecesor succ ( succ ( a ) ) = succ ( a )

predecesor succ ( succ ( succ ( a ))) = succ ( succ ( a ))



main = putStrLn "Hello, Haskell!"